AWSTemplateFormatVersion: "2010-09-09"
Description: Festival scraper resources
Parameters:
  ParamFestivalBucketArn:
    Type: AWS::SSM::Parameter::Value<String>
  ParamFestivalBucketName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamDeploymentBucketName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamFunctionVersion:
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: UploadToS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 's3:PutObject'
            Resource:
            - !Sub ${ParamFestivalBucketArn}/*
      - PolicyName: GetSsmParameters
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 'ssm:GetParameters'
            Resource:
            - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/spotify/client-id
            - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/spotify/client-secret
            - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/github/festival-scraper/pr-token
  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt [ LambdaCronJob, Arn ]
      FunctionName: !Ref Lambda
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: festival-scraper
      Runtime: python3.12
      Handler: handler.handler
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Timeout: 60
      Environment:
        Variables:
          FESTIVAL_ARTISTS_BUCKET: !Ref ParamFestivalBucketName
          SPOTIFY_CLIENT_ID_PARAMETER_NAME: /spotify/client-id
          SPOTIFY_CLIENT_SECRET_PARAMETER_NAME: /spotify/client-secret
          GITHUB_PR_TOKEN_PARAMETER_NAME: /github/festival-scraper/pr-token
          LOG_LEVEL: ERROR
          DEBUG_ARTIST_NAME: ""
      Code:
        S3Bucket: !Ref ParamDeploymentBucketName
        S3Key: festival-scraper.zip
        S3ObjectVersion: !Ref ParamFunctionVersion

  CronJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: ExecuteWackenArtistsLambda
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource: !GetAtt [ Lambda, Arn ]
  LambdaCronJob:
    Type: AWS::Events::Rule
    Properties:
      Name: FestivalScraperLambdaTrigger
      ScheduleExpression: cron(0 9,15,20 * * ? *)
      RoleArn: !GetAtt [ CronJobRole, Arn ]
      Targets:
      - Arn: !GetAtt [ Lambda, Arn ]
        Id: "Wacken-Artists-Lambda"